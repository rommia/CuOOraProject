Object subclass: #Calificacion	instanceVariableNames: 'fechaCreacion usuario'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-model'!!Calificacion methodsFor: 'accessing' stamp: 'Romina 4/17/2020 21:15'!usuario: unUsuario	usuario:= unUsuario.	fechaCreacion := DateAndTime now. ! !!Calificacion methodsFor: 'accessing' stamp: 'Romina 4/17/2020 21:15'!fechaCreacion	^ fechaCreacion ! !!Calificacion methodsFor: 'accessing' stamp: 'Romina 3/23/2020 18:42'!usuario	^usuario! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Calificacion class	instanceVariableNames: ''!!Calificacion class methodsFor: 'accessing' stamp: 'Romina 4/17/2020 22:07'!usuario: unUsuario	^ self new usuario: unUsuario! !Object subclass: #Post	instanceVariableNames: 'usuarioCreador fechaCreacion likes dislikes'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-model'!!Post methodsFor: 'accessing' stamp: 'Romina 4/17/2020 21:15'!fechaCreacion	^ fechaCreacion ! !!Post methodsFor: 'accessing' stamp: 'Romina 3/30/2020 18:28'!usuarioCreador	^ usuarioCreador ! !!Post methodsFor: 'accessing' stamp: 'Romina 3/31/2020 16:39'!usuarioCreador: unUsuario	usuarioCreador := unUsuario.! !!Post methodsFor: 'accessing' stamp: 'Romina 3/31/2020 18:02'!like: unUsuario	dislikes detect: [ :each | each usuario nombre = unUsuario nombre ] ifFound: [ :each | dislikes remove: each ].	likes detect: [ :each | each usuario nombre = unUsuario nombre ] 			ifFound: [ ^false. ]  			ifNone: [ |calificacion|.						 calificacion := Calificacion new. 						calificacion usuario: unUsuario.						likes add: calificacion.						^ true.]! !!Post methodsFor: 'as yet unclassified' stamp: 'Romina 3/23/2020 19:15'!cantidadLikes	^ likes size! !!Post methodsFor: 'as yet unclassified' stamp: 'Romina 3/23/2020 19:15'!cantidadDislikes	^ dislikes size! !!Post methodsFor: 'as yet unclassified' stamp: 'Romina 3/31/2020 17:57'!dislike:unUsuario	likes detect: [ :each | each usuario nombre = unUsuario nombre ] ifFound: [ :each | likes remove: each ].	dislikes detect: [ :each | each usuario nombre = unUsuario nombre ] 			ifFound: [ ^false. ]  			ifNone: [ |calificacion|.						 calificacion := Calificacion new. 						calificacion usuario: unUsuario.						dislikes add: calificacion.						^ true.]	! !!Post methodsFor: 'initialization' stamp: 'Romina 4/17/2020 21:15'!initialize	fechaCreacion := DateAndTime now. 	likes := Set new.	dislikes := Set new.! !Post subclass: #Pregunta	instanceVariableNames: 'topicos titulo descripcion respuestas'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-model'!!Pregunta methodsFor: 'initialization' stamp: 'Romina 5/17/2020 11:33'!titulo: unTitulo descripcion: unaDescripcion topicos: unosTopicos usuarioCreador: unUsuario	self usuarioCreador:unUsuario.	usuarioCreador agregarPregunta: self.	titulo:= unTitulo.	descripcion:= unaDescripcion.	unosTopicos do: [ :each | self agregarTopico: (Topico nombre: each descripcion: '') ].! !!Pregunta methodsFor: 'initialization' stamp: 'Romina 4/17/2020 22:06'!initialize	topicos := Set new.	respuestas := OrderedCollection new.	super initialize.! !!Pregunta methodsFor: 'accessing' stamp: 'Romina 3/31/2020 17:15'!topicos	^ topicos! !!Pregunta methodsFor: 'accessing' stamp: 'Romina 3/23/2020 18:07'!respuestas	^respuestas ! !!Pregunta methodsFor: 'accessing' stamp: 'Romina 4/9/2020 18:10'!descripcion	^descripcion! !!Pregunta methodsFor: 'accessing' stamp: 'Romina 3/23/2020 18:07'!titulo	^titulo! !!Pregunta methodsFor: 'add method - compiled method' stamp: 'Romina 3/23/2020 18:07'!agregarTopico: unTopico	topicos add: unTopico ! !!Pregunta methodsFor: 'add method - compiled method' stamp: 'Romina 3/30/2020 18:29'!agregarRespuesta: unaRespuesta	respuestas add: unaRespuesta.	unaRespuesta usuarioCreador agregarRespuesta: unaRespuesta ! !!Pregunta methodsFor: 'as yet unclassified' stamp: 'Romina 5/17/2020 10:53'!eliminarRespuestas	respuestas removeAll.! !!Pregunta methodsFor: 'as yet unclassified' stamp: 'Romina 4/18/2020 17:13'!nombreTopicos	^ topicos collect: [ :each | each nombre ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pregunta class	instanceVariableNames: ''!!Pregunta class methodsFor: 'as yet unclassified' stamp: 'Romina 4/17/2020 22:03'!titulo: unTitulo descripcion: unaDescripcion topicos: unTopico usuarioCreador: unUsuario	^ self new titulo: unTitulo descripcion: unaDescripcion topicos: unTopico usuarioCreador: unUsuario! !Post subclass: #Respuesta	instanceVariableNames: 'texto pregunta'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-model'!!Respuesta methodsFor: 'accessing' stamp: 'Romina 3/31/2020 17:05'!pregunta	^ pregunta! !!Respuesta methodsFor: 'accessing' stamp: 'Romina 4/8/2020 15:28'!texto	^texto! !!Respuesta methodsFor: 'as yet unclassified' stamp: 'Romina 4/19/2020 11:12'!texto: unTexto pregunta: unaPregunta usuarioCreador: unUsuario	self usuarioCreador:unUsuario.	texto := unTexto.	pregunta := unaPregunta.	unaPregunta agregarRespuesta: self.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Respuesta class	instanceVariableNames: ''!!Respuesta class methodsFor: 'as yet unclassified' stamp: 'Romina 4/17/2020 22:03'!texto: unTexto pregunta: unaPregunta usuarioCreador: unUsuario	^ self new texto: unTexto pregunta: unaPregunta usuarioCreador: unUsuario! !Object subclass: #Sistema	instanceVariableNames: 'usuarios preguntas topicos'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-model'!!Sistema commentStamp: 'Romina 5/17/2020 14:14' prior: 0!Evaluación en el playground :'|app|app := WAAdmin register: LoginComponent asApplicationAt: 'CuOOra/login'.app sessionClass: UsuarioSession '!!Sistema methodsFor: 'tests' stamp: 'Romina 4/18/2020 12:03'!agregarUsuario: unUsuario	usuarios detect: [ :each | each nombre = unUsuario nombre ] 				ifFound: [ ^ false ] 				ifNone: [ usuarios add: unUsuario.							^ true ]	! !!Sistema methodsFor: 'accessing' stamp: 'Romina 4/18/2020 18:42'!topicos	^ topicos ! !!Sistema methodsFor: 'accessing' stamp: 'Romina 5/17/2020 12:17'!preguntas	^ preguntas ! !!Sistema methodsFor: 'accessing' stamp: 'Romina 3/30/2020 22:47'!usuarios	^ usuarios! !!Sistema methodsFor: 'accessing' stamp: 'Romina 5/17/2020 13:41'!obtenerUsuario: unUsuario	^ usuarios detect: [ :each | each nombre = unUsuario nombre & (each contrasenia = unUsuario contrasenia)] 					! !!Sistema methodsFor: 'add method - compiled method' stamp: 'Romina 3/25/2020 16:47'!agregarTopico: unTopico	topicos add: unTopico! !!Sistema methodsFor: 'as yet unclassified' stamp: 'Romina 5/4/2020 13:36'!initialize	usuarios := Set new.	topicos := Set new.	preguntas := OrderedCollection new.	self instanciaDePrueba ! !!Sistema methodsFor: 'as yet unclassified' stamp: 'Romina 5/17/2020 11:55'!agregarPregunta: unaPregunta	preguntas add: unaPregunta.	unaPregunta topicos do: [ :each | (self existeTopico: each nombre) ifTrue: [(self obtenerTopico: each nombre) agregarPregunta: unaPregunta] ifFalse: [self agregarTopico: (Topico nombre: each nombre asString descripcion: '')]]! !!Sistema methodsFor: 'as yet unclassified' stamp: 'Romina 5/17/2020 11:40'!obtenerTopico: unString	^ topicos detect: [ :each | each nombre = unString] ! !!Sistema methodsFor: 'as yet unclassified' stamp: 'Romina 5/17/2020 10:49'!obtenerPreguntasDeInteresPara: unUsuario	^ unUsuario preguntasDeInteres ! !!Sistema methodsFor: 'as yet unclassified' stamp: 'Romina 5/17/2020 14:03'!preguntasDe: unObjeto	^ unObjeto preguntas	! !!Sistema methodsFor: 'as yet unclassified' stamp: 'Romina 5/17/2020 12:02'!eliminarPregunta: unaPregunta	unaPregunta eliminarRespuestas.	usuarios detect: [ :each | each nombre = unaPregunta usuarioCreador nombre ] ifFound: [ :each | each eliminarPregunta: unaPregunta ].	preguntas remove: unaPregunta.! !!Sistema methodsFor: 'as yet unclassified' stamp: 'Romina 5/17/2020 13:04'!obtenerPregunta: unString	^ self preguntas detect: [ :each | each titulo = unString] ! !!Sistema methodsFor: 'as yet unclassified' stamp: 'Romina 5/17/2020 11:53'!existeTopico: unString	topicos detect: [ :each | each nombre = unString] ifFound: [ ^ true ] ifNone: [ ^ false ]! !!Sistema methodsFor: 'as yet unclassified' stamp: 'Romina 5/17/2020 11:34'!instanciaDePrueba	|p j d  p1 p2 r2 r1|	p := Usuario nombre: 'Pedro' email:'pedro@cuoora.com' contrasenia: 'pedro'.	j := Usuario nombre: 'Juan' email: 'juan@cuoora.com' contrasenia: 'juan'.	d := Usuario nombre: 'Diego' email: 'diego@cuoora.com' contrasenia: 'diego'.	p1 := Pregunta titulo: '¿Qué significa #messageNotUnderstood?' descripcion: '' topicos: (Set withAll: ('OO1, Smalltalk' substrings: ',')) usuarioCreador: d.	self agregarPregunta: p1.	p2 := Pregunta titulo: '¿Para qué sirve el método SetUp?' descripcion: '' topicos:(Set withAll: ('OO1, Test de unidad' substrings: ',')) usuarioCreador: p.	self agregarPregunta: p2.	j agregarSeguido: d.	p agregarSeguido: j.	self agregarUsuario: p.	self agregarUsuario: j.	self agregarUsuario: d.	r1:= Respuesta texto: 'Significa que el objeto que recibió el mensaje no encontró ningún método para ejecutar en respuesta.' pregunta: p1 usuarioCreador: d.	r2:= Respuesta texto: 'Sirve para instanciar los objetos que son evaluados por el test en un único método y que se ejecute siempre antes de cada test.' pregunta: p2 usuarioCreador: d. ! !!Sistema methodsFor: 'as yet unclassified' stamp: 'Romina 5/17/2020 13:41'!existeUsuario: unUsuario	usuarios detect: [ :each | each nombre = unUsuario nombre & (each contrasenia = unUsuario contrasenia)] 					ifFound: [ :each | ^ true ] 					ifNone: [ ^ false ]! !!Sistema methodsFor: 'as yet unclassified' stamp: 'Romina 5/17/2020 13:05'!existePregunta: unString	preguntas detect: [ :each | each titulo = unString ] ifFound: [^ true ] ifNone: [ ^ false ]! !!Sistema methodsFor: 'as yet unclassified' stamp: 'Romina 3/30/2020 19:02'!respuestasDe: unUsuario	^ unUsuario respuestas! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Sistema class	instanceVariableNames: 'soleInstance'!!Sistema class methodsFor: 'accessing' stamp: 'Romina 4/8/2020 09:10'!clearSoleInstance 	soleInstance := nil! !!Sistema class methodsFor: 'accessing' stamp: 'Romina 4/9/2020 11:24'!soleInstance 	^ soleInstance ifNil: [soleInstance := self new]! !Object subclass: #Topico	instanceVariableNames: 'nombre descripcion preguntas'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-model'!!Topico methodsFor: 'initialization' stamp: 'Romina 3/23/2020 17:18'!initialize 	preguntas := OrderedCollection new.! !!Topico methodsFor: 'as yet unclassified' stamp: 'Romina 3/23/2020 18:02'!nombre: unNombre descripcion: unaDescripcion	nombre := unNombre.	descripcion := unaDescripcion.! !!Topico methodsFor: 'as yet unclassified' stamp: 'Romina 4/18/2020 15:31'!agregarPregunta: unaPregunta	preguntas add: unaPregunta! !!Topico methodsFor: 'accessing' stamp: 'Romina 3/23/2020 17:55'!preguntas	^ preguntas! !!Topico methodsFor: 'accessing' stamp: 'Romina 3/23/2020 18:03'!nombre	^nombre! !!Topico methodsFor: 'accessing' stamp: 'Romina 4/17/2020 09:28'!nombre: unNombre	nombre:= unNombre ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topico class	instanceVariableNames: ''!!Topico class methodsFor: 'as yet unclassified' stamp: 'Romina 4/17/2020 22:07'!nombre: unNombre descripcion: unaDescripcion	^self new nombre:unNombre descripcion: unaDescripcion! !!Topico class methodsFor: 'accessing' stamp: 'Romina 4/17/2020 22:07'!nombre: unNombre	^ self new nombre: unNombre ! !Object subclass: #Usuario	instanceVariableNames: 'nombre email contrasenia fechaCreacion preguntas respuestas intereses seguidores seguidos'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-model'!!Usuario methodsFor: 'as yet unclassified' stamp: 'Romina 3/23/2020 17:45'!agregarTopicoDeIteres: unTopico	intereses add: unTopico ! !!Usuario methodsFor: 'as yet unclassified' stamp: 'Romina 3/31/2020 15:55'!agregarPregunta: unaPregunta	preguntas add: unaPregunta! !!Usuario methodsFor: 'as yet unclassified' stamp: 'Romina 3/31/2020 10:56'!agregarSeguido: unUsuario	seguidos add: unUsuario.	unUsuario agregarSeguidor: self.! !!Usuario methodsFor: 'as yet unclassified' stamp: 'Romina 3/30/2020 18:56'!puntaje	^ (preguntas size * 20) + (respuestas size * 50) + self likesTotales - self dislikesTotales ! !!Usuario methodsFor: 'as yet unclassified' stamp: 'Romina 3/30/2020 18:53'!likesTotales	^ (preguntas sumNumbers: [ :each | each cantidadLikes ]) + (respuestas sumNumbers: [ :each | each cantidadLikes ])! !!Usuario methodsFor: 'as yet unclassified' stamp: 'Romina 4/17/2020 21:16'!nombre: unNombre email: unEmail contrasenia: unaContrasenia	nombre:= unNombre.	email:= unEmail.	contrasenia := unaContrasenia.! !!Usuario methodsFor: 'as yet unclassified' stamp: 'Romina 3/31/2020 16:11'!agregarSeguidor: unUsuario	seguidores add: unUsuario.! !!Usuario methodsFor: 'as yet unclassified' stamp: 'Romina 3/30/2020 18:54'!dislikesTotales	^ (preguntas sumNumbers: [ :each | each cantidadDislikes ]) + (respuestas sumNumbers: [ :each | each cantidadDislikes ])! !!Usuario methodsFor: 'as yet unclassified' stamp: 'Romina 5/4/2020 13:39'!preguntasDeInteres	|pdi|.	pdi := Set new.	self seguidos do: [ :each | pdi addAll: each preguntas].	self topicos do: [ :each | pdi addAll: each preguntas ].	^ pdi! !!Usuario methodsFor: 'as yet unclassified' stamp: 'Romina 5/17/2020 10:55'!eliminarPregunta: unaPregunta	preguntas remove: unaPregunta ! !!Usuario methodsFor: 'as yet unclassified' stamp: 'Romina 3/25/2020 15:44'!topicos 	^ intereses! !!Usuario methodsFor: 'accessing' stamp: 'Romina 3/31/2020 15:01'!nombre 	^ nombre! !!Usuario methodsFor: 'accessing' stamp: 'Romina 4/8/2020 09:22'!contrasenia	^contrasenia ! !!Usuario methodsFor: 'accessing' stamp: 'Romina 4/17/2020 21:15'!fechaCreacion 	^ fechaCreacion ! !!Usuario methodsFor: 'accessing' stamp: 'Romina 3/30/2020 18:26'!respuestas 		^respuestas! !!Usuario methodsFor: 'accessing' stamp: 'Romina 3/25/2020 15:43'!seguidos	^seguidos! !!Usuario methodsFor: 'accessing' stamp: 'Romina 3/31/2020 16:05'!seguidores	^ seguidores! !!Usuario methodsFor: 'accessing' stamp: 'Romina 3/31/2020 15:56'!preguntas	^ preguntas! !!Usuario methodsFor: 'initialization' stamp: 'Romina 4/17/2020 21:12'!initialize 	seguidos := Set new.	seguidores := Set new.	fechaCreacion := DateAndTime now. 	intereses := Set new.	respuestas := OrderedCollection new.	preguntas := OrderedCollection new.! !!Usuario methodsFor: 'add method - compiled method' stamp: 'Romina 3/30/2020 18:26'!agregarRespuesta: unaRespuesta	respuestas add: unaRespuesta ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Usuario class	instanceVariableNames: ''!!Usuario class methodsFor: 'as yet unclassified' stamp: 'Romina 4/17/2020 22:08'!nombre: unNombre email: unEmail contrasenia: unaContrasenia	^ self new nombre: unNombre email:unEmail contrasenia: unaContrasenia! !TestCase subclass: #CalificacionTest	instanceVariableNames: 'cal'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-Tests'!!CalificacionTest methodsFor: 'tests' stamp: 'Romina 4/18/2020 18:33'!testInitialize 	self assert: [ cal usuario nombre = 'Romi' ]! !!CalificacionTest methodsFor: 'running' stamp: 'Romina 4/18/2020 18:32'!setUp	cal := Calificacion usuario: (Usuario nombre: 'Romi' email: 'r' contrasenia: '123')! !TestCase subclass: #PreguntaTest	instanceVariableNames: 'question question2'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-Tests'!!PreguntaTest methodsFor: 'tests' stamp: 'Romina 4/18/2020 10:45'!testDislike	|unUsuario|	unUsuario := Usuario nombre: 'Romi' email: 'romi@algo' contrasenia: '123'.	self assert: [ question cantidadDislikes = 0 ].	self assert: [ question dislike: unUsuario ].	self assert: [ question cantidadDislikes = 1 ].	self deny: [ question dislike: unUsuario ].	self assert: [ question cantidadDislikes = 1 ].! !!PreguntaTest methodsFor: 'tests' stamp: 'Romina 4/18/2020 10:45'!testCantidadLikes	|unUsuario otroUsuario|	unUsuario := Usuario nombre: 'Romi' email: 'romi@algo' contrasenia: '123'.	otroUsuario := Usuario nombre: 'Fermin'email: 'fer@algo' contrasenia: '123'.	self assert: [ question cantidadLikes = 0 ].	question like: unUsuario.	self assert: [ question cantidadLikes = 1 ].	question like: otroUsuario.	self assert: [ question cantidadLikes = 2].	question dislike: otroUsuario.	self assert: [ question cantidadLikes = 1]! !!PreguntaTest methodsFor: 'tests' stamp: 'Romina 4/19/2020 11:26'!testAgregarRespuesta	|unaRespuesta romi|.	romi := Usuario new.	self assert: [ question respuestas isEmpty ].	unaRespuesta := Respuesta texto: 'soy una respuesta' pregunta: question usuarioCreador: romi.	self assert: [ question respuestas size = 1 ].	self deny: [ question respuestas isEmpty ].	self assert: [ question respuestas includes: unaRespuesta ].	self assert: [ unaRespuesta pregunta = question].! !!PreguntaTest methodsFor: 'tests' stamp: 'Romina 4/18/2020 11:11'!testLike	|unUsuario|	unUsuario := Usuario new.	unUsuario nombre: 'Romi' email: 'r' contrasenia: '123'.	self assert: [ question cantidadDislikes = 0 ].	self assert: [ question cantidadLikes = 0 ].	self assert: [ question like: unUsuario ].	self assert: [ question cantidadLikes = 1 ].	self deny: [ question like: unUsuario ].	self assert: [ question cantidadLikes = 1 ].	self assert: [ question dislike: unUsuario ].	self assert: [ question cantidadDislikes = 1 ].	self assert: [ question cantidadLikes = 0 ]! !!PreguntaTest methodsFor: 'tests' stamp: 'Romina 5/17/2020 11:19'!testEliminarRespuestas	|unaRespuesta unUsuario|.	self assert: [ question respuestas isEmpty ].	unUsuario := Usuario new.	question titulo: 'cómo se hace un retweet?' descripcion: 'necesito saber cómo hacer un retweet'  topicos: 'twitter' usuarioCreador: unUsuario.	unaRespuesta := Respuesta texto: 'con el botón' pregunta: question  usuarioCreador: unUsuario.	question agregarRespuesta: unaRespuesta.	self deny: [ question respuestas isEmpty ].	question eliminarRespuestas.	self assert: [ question respuestas isEmpty ].! !!PreguntaTest methodsFor: 'tests' stamp: 'Romina 3/31/2020 17:15'!testAgregarTopico	|unTopico|.	unTopico := Topico new.	self assert: [ question topicos isEmpty ].	question agregarTopico: unTopico.	self deny: [ question topicos isEmpty ].	self assert: [ question topicos includes: unTopico ]! !!PreguntaTest methodsFor: 'tests' stamp: 'Romina 5/17/2020 11:36'!testInitialize	|unUsuario|	unUsuario := Usuario new.	question titulo: 'cómo se hace un retweet?' descripcion: 'necesito saber cómo hacer un retweet'  topicos:(Set withAll: ('Twitter, retweet' substrings: ',')) usuarioCreador: unUsuario.	self assert: [ question topicos size = 2 ].	question2 titulo: 'cómo se hace un retweet?' descripcion: 'necesito saber cómo hacer un retweet'  topicos: (Set withAll: ('Twitter' substrings: ',')) usuarioCreador: unUsuario.	self assert: [ question2 topicos size = 1].! !!PreguntaTest methodsFor: 'running' stamp: 'Romina 4/18/2020 11:26'!setUp	question := Pregunta new.	question2:= Pregunta new.! !TestCase subclass: #RespuestaTest	instanceVariableNames: 'answer'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-Tests'!!RespuestaTest methodsFor: 'tests' stamp: 'Romina 4/18/2020 10:41'!testInitialize		|p|.	p := Pregunta titulo: 'Qué es Python?' descripcion: 'Quiero saber qué es python.' topicos: 'Informática' usuarioCreador: (Usuario nombre: 'romi' email: 'r@algo' contrasenia: '123').	p agregarRespuesta: (answer := Respuesta texto: 'Un lenguaje de programación' pregunta: p usuarioCreador: (Usuario nombre: 'Fermin'  email: 'fer@algo'  contrasenia: '123' )).	self assert: [ p respuestas includes: answer ].	self assert: [ answer usuarioCreador nombre = 'Fermin' ]! !!RespuestaTest methodsFor: 'initialization' stamp: 'Romina 4/18/2020 10:38'!setUp ! !TestCase subclass: #SistemaTest	instanceVariableNames: 'full'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-Tests'!!SistemaTest methodsFor: 'tests' stamp: 'Romina 5/17/2020 14:09'!testPreguntasDe 	|unUsuario unaPregunta otraPregunta unTopico|	unUsuario := Usuario nombre: 'Fer' email: 'fer@algo.com' contrasenia: '123'.	unaPregunta := Pregunta titulo: 'Cómo agrego un elemento a una lista en Python?' descripcion: 'Quiero agregar un elemento a una lista en Python' topicos: (Set withAll: ('Python, Listas' substrings: ',')) usuarioCreador: unUsuario.	full agregarUsuario: unUsuario.	self assert: [ (full preguntasDe: unUsuario) size = 1].	unTopico := Topico nombre: 'Java' descripcion: 'Lenguaje de programación'. 	otraPregunta := Pregunta titulo: 'Cómo declaro una variable en Java?' descripcion: 'Variables en java' topicos: 'Java' usuarioCreador: unUsuario.	unTopico agregarPregunta: otraPregunta.	self assert: [ (full preguntasDe: unTopico) size = 1].		! !!SistemaTest methodsFor: 'tests' stamp: 'Romina 5/17/2020 13:50'!testObtenerUsuario	|unUsuario|	unUsuario := Usuario nombre: 'Fer' email: 'Fer@algo.com' contrasenia: '123'.	self deny: [ full existeUsuario: unUsuario ].	full agregarUsuario: unUsuario.	self assert: [ full existeUsuario: unUsuario ].	self assert: [ (full obtenerUsuario: unUsuario) = unUsuario ]! !!SistemaTest methodsFor: 'tests' stamp: 'Romina 5/17/2020 14:19'!testRespuestasDe	|unUsuario unaRespuesta|	unUsuario := Usuario nombre: 'Romi' email: 'Algo' contrasenia: '123'.	unaRespuesta := Respuesta new.		self assert: [ (full respuestasDe: unUsuario) isEmpty ].	unUsuario agregarRespuesta: unaRespuesta.	full agregarUsuario: unUsuario.	self deny: [ (full respuestasDe: unUsuario) isEmpty ].	self assert: [ (full respuestasDe: unUsuario) size = 1 ]! !!SistemaTest methodsFor: 'tests' stamp: 'Romina 5/17/2020 12:54'!testExisteTopico	self deny: [ full existeTopico: 'Python' ].	full agregarTopico: (Topico nombre: 'Python' descripcion: 'Sobre el lenguaje de programacion Python').	self assert: [ full existeTopico: 'Python']! !!SistemaTest methodsFor: 'tests' stamp: 'Romina 5/17/2020 13:47'!testExisteUsuario	|unUsuario|	unUsuario := Usuario nombre: 'Fer' email: 'Fer@algo.com' contrasenia: '123'.	self deny: [ full existeUsuario: unUsuario ].	full agregarUsuario: unUsuario.	self assert: [ full existeUsuario: unUsuario  ]! !!SistemaTest methodsFor: 'tests' stamp: 'Romina 5/17/2020 13:39'!testObtenerTopico	|unTopico|	unTopico := Topico nombre: 'Java' descripcion: 'Lenguaje de programación'. 	self deny: [ full existeTopico: 'Java'].	full agregarTopico: unTopico.	self assert: [ full existeTopico: 'Java' ].	self assert: [ (full obtenerTopico: 'Java') = unTopico ]! !!SistemaTest methodsFor: 'tests' stamp: 'Romina 5/17/2020 13:06'!testObtenerPregunta	|unaPregunta|	unaPregunta := Pregunta titulo: 'Cómo ordeno un array en Java?' descripcion: 'Quiero ordenar los elementos de un array en java' topicos: 'Java' usuarioCreador: (Usuario nombre: 'Romina' email: 'romi@algo.com' contrasenia: '123').	full agregarPregunta: unaPregunta.	self assert: [ full existePregunta: 'Cómo ordeno un array en Java?' ].	self assert: [ (full obtenerPregunta: 'Cómo ordeno un array en Java?') = unaPregunta ]! !!SistemaTest methodsFor: 'tests' stamp: 'Romina 5/17/2020 13:11'!testExistePregunta	|unaPregunta|	unaPregunta := Pregunta titulo: 'Cómo ordeno un array en Java?' descripcion: 'Quiero ordenar los elementos de un array en java' topicos: 'Java' usuarioCreador: (Usuario nombre: 'Romina' email: 'romi@algo.com' contrasenia: '123').	self deny: [ full existePregunta: 'Cómom ordeno un array en Java?' ].	full agregarPregunta: unaPregunta.	self assert: [ full existePregunta: 'Cómo ordeno un array en Java?' ].! !!SistemaTest methodsFor: 'tests' stamp: 'Romina 5/17/2020 14:28'!testAgregarPregunta	|p|.	p := Pregunta titulo: 'Cómo se hace un retweet?' descripcion: 'No se hacer un retweet' topicos: (Set withAll: ('Twitter, Tweets' substrings: ','))  usuarioCreador: (Usuario nombre: 'Arjona' email: 'arj@na' contrasenia: '123').	full agregarPregunta: p.	self assert: [ (full existePregunta: 'Cómo se hace un retweet?')].	self assert: [ (full existeTopico: 'Twitter')].! !!SistemaTest methodsFor: 'tests' stamp: 'Romina 5/17/2020 13:33'!testObtenerPreguntasDeInteresPara	|unUsuario otroUsuario unaPregunta otraPregunta unTopico otroUsuario1|	unUsuario := Usuario nombre: 'Fer' email: 'fer@algo.com' contrasenia: '123'.	full agregarUsuario: unUsuario.	self assert: [ (full obtenerPreguntasDeInteresPara: unUsuario) isEmpty ].	otroUsuario := Usuario nombre: 'Ger' email: 'ger@hmail.com' contrasenia: '123'.	unaPregunta := Pregunta titulo: 'Cómo agrego un elemento a una lista en Python?' descripcion: 'Quiero agregar un elemento a una lista en Python' topicos: (Set withAll: ('Python, Listas' substrings: ',')) usuarioCreador: otroUsuario.	otroUsuario1 := Usuario nombre: 'Axel' email: 'axl@algo.com' contrasenia: '123'.	full agregarUsuario: otroUsuario.	unUsuario agregarSeguido: otroUsuario.	self assert: [ (full obtenerPreguntasDeInteresPara: unUsuario) size = 1].	unTopico := Topico nombre: 'Java' descripcion: 'Lenguaje de programación'. 	otraPregunta := Pregunta titulo: 'Cómo declaro una variable en Java?' descripcion: 'Variables en java' topicos: 'Java' usuarioCreador: otroUsuario1.	unTopico agregarPregunta: otraPregunta.	unUsuario agregarTopicoDeIteres: unTopico.	self assert: [ (full obtenerPreguntasDeInteresPara: unUsuario) size = 2].		! !!SistemaTest methodsFor: 'tests' stamp: 'Romina 4/18/2020 12:05'!testAgregarUsuario	|unUsuario|.	unUsuario := Usuario nombre: 'Romi' email: 'r@algo' contrasenia: '123'.	self assert: [ full agregarUsuario: unUsuario].	self assert: [ full usuarios size = 4 ].	self deny: [ (full agregarUsuario: unUsuario) ].	self assert: [ full usuarios size = 4 ]! !!SistemaTest methodsFor: 'tests' stamp: 'Romina 5/17/2020 12:51'!testAgregarTopico 	|unTopico|	unTopico:= Topico nombre: 'Java' descripcion: 'Sobre el lenguaje de programación Java'.	self deny: [ full topicos includes: unTopico ].	self assert: [ full topicos size = 3].	full agregarTopico: unTopico.	self assert: [ full topicos includes:unTopico  ].	self assert: [ full topicos size = 4]! !!SistemaTest methodsFor: 'running' stamp: 'Romina 4/18/2020 12:13'!setUp	full := Sistema new.! !!SistemaTest methodsFor: 'as yet unclassified' stamp: 'Romina 5/17/2020 14:29'!testEliminarPregunta	|unaPregunta unaRespuesta unUsuario|.	unUsuario := Usuario new.	unaPregunta := Pregunta  titulo: 'cómo hago un retweet?' descripcion: 'necesito saber cómo hacer un retweet'  topicos: (Set withAll: ('Twitter' substrings: ','))  usuarioCreador: unUsuario.	unUsuario agregarPregunta: unaPregunta.	full agregarUsuario: unUsuario.	full agregarPregunta: unaPregunta.	unaRespuesta := Respuesta texto: 'con el botón' pregunta: unaPregunta  usuarioCreador: unUsuario.	(full obtenerPregunta:unaPregunta titulo) agregarRespuesta: unaRespuesta.	self assert: [ full preguntas includes: unaPregunta ].	full eliminarPregunta: unaPregunta.	self deny: [ full preguntas includes: unaPregunta ].	self assert: [ unaPregunta respuestas isEmpty ]! !TestCase subclass: #TopicoTest	instanceVariableNames: 'topico'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-Tests'!!TopicoTest methodsFor: 'running' stamp: 'Romina 4/18/2020 18:33'!setUp	topico := Topico nombre: 'topic' descripcion: 'soy un topico'! !!TopicoTest methodsFor: 'tests' stamp: 'Romina 4/18/2020 18:34'!testInitialize 	self assert: [topico nombre = 'topic']! !TestCase subclass: #UsuarioTest	instanceVariableNames: 'user'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-Tests'!!UsuarioTest methodsFor: 'running' stamp: 'Romina 4/18/2020 12:47'!setUp	user := Usuario nombre: 'Romi' email: 'r' contrasenia: '123'! !!UsuarioTest methodsFor: 'tests' stamp: 'Romina 3/31/2020 16:06'!testAgregarSeguido	|unUsuario|.	unUsuario := Usuario new.	self assert: [ user seguidos isEmpty ].	user agregarSeguido: unUsuario.	self deny: [ user seguidos isEmpty ].	self assert: [ user seguidos includes: unUsuario ].	self assert: [ unUsuario seguidores includes: user ]! !!UsuarioTest methodsFor: 'tests' stamp: 'Romina 3/31/2020 16:47'!testDislikesTotales	|unaRespuesta unaPregunta|.	self assert: [ user dislikesTotales = 0 ].	unaRespuesta := Respuesta new.	unaRespuesta dislike: user.	unaPregunta := Pregunta new.	unaPregunta dislike: user.	user agregarPregunta: unaPregunta.	user agregarRespuesta: unaRespuesta.	self assert: [ user dislikesTotales = 2 ].! !!UsuarioTest methodsFor: 'tests' stamp: 'Romina 5/17/2020 13:58'!testEliminarPregunta	|unaPregunta|.	unaPregunta := Pregunta new.	self assert: [ user preguntas isEmpty ].	user agregarPregunta: unaPregunta.	self assert: [ user preguntas size = 1 ].	user eliminarPregunta: unaPregunta.	self assert: [ user preguntas isEmpty ]! !!UsuarioTest methodsFor: 'tests' stamp: 'Romina 3/31/2020 16:12'!testAgregarSeguidor	|unUsuario|.	unUsuario := Usuario new.	self assert: [ user seguidores isEmpty ].	user agregarSeguidor: unUsuario.	self deny: [ user seguidores isEmpty ].	self assert: [ user seguidores includes: unUsuario ].! !!UsuarioTest methodsFor: 'tests' stamp: 'Romina 3/31/2020 15:57'!testAgregarPregunta	|unaPregunta|.	unaPregunta := Pregunta new.	self assert: [ user preguntas isEmpty ].	user agregarPregunta: unaPregunta.	self assert: [ user preguntas size = 1 ]! !!UsuarioTest methodsFor: 'tests' stamp: 'Romina 5/17/2020 13:56'!testPreguntasDeInteres	|unUsuario otroUsuario unaPregunta otraPregunta unTopico |	unUsuario := Usuario nombre: 'Fer' email: 'fer@algo.com' contrasenia: '123'.	unaPregunta := Pregunta titulo: 'Cómo agrego un elemento a una lista en Python?' descripcion: 'Quiero agregar un elemento a una lista en Python' topicos: (Set withAll: ('Python, Listas' substrings: ',')) usuarioCreador: unUsuario.	self assert: [ (user preguntasDeInteres) isEmpty ].	user agregarSeguido: unUsuario.	self assert: [ (user preguntasDeInteres size) = 1  ].	otroUsuario := Usuario nombre: 'Ger' email: 'ger@hmail.com' contrasenia: '123'.	unTopico := Topico nombre: 'Java' descripcion: 'Lenguaje de programación'. 	otraPregunta := Pregunta titulo: 'Cómo declaro una variable en Java?' descripcion: 'Variables en java' topicos: 'Java' usuarioCreador: otroUsuario.	unTopico agregarPregunta: otraPregunta.	user agregarTopicoDeIteres: unTopico.	self assert: [ (user preguntasDeInteres) size = 2].	! !!UsuarioTest methodsFor: 'tests' stamp: 'Romina 4/19/2020 07:41'!testPuntaje	|unaRespuesta unaPregunta|.	self assert: [ user puntaje = 0 ].	unaRespuesta := Respuesta new.	unaRespuesta like: user.	unaPregunta := Pregunta new.	unaPregunta dislike: user.	user agregarPregunta: unaPregunta.	user agregarRespuesta: unaRespuesta.	self assert: [ user puntaje = 70]			! !!UsuarioTest methodsFor: 'tests' stamp: 'Romina 3/31/2020 16:03'!testAgregarRespuesta	|unaRespuesta|	unaRespuesta := Respuesta new.	self assert: [ user respuestas isEmpty ].	user agregarRespuesta: unaRespuesta.	self deny: [ user respuestas isEmpty ].	self assert: [ user respuestas size = 1 ]! !!UsuarioTest methodsFor: 'tests' stamp: 'Romina 3/31/2020 16:16'!testAgregarTopicoDeInteres	|unTopico|.	unTopico := Topico new.	self assert: [ user topicos isEmpty ].	user agregarTopicoDeIteres: unTopico.	self deny: [ user topicos isEmpty ].	self assert: [ user topicos includes: unTopico ]! !!UsuarioTest methodsFor: 'tests' stamp: 'Romina 3/31/2020 16:47'!testLikesTotales	|unaRespuesta unaPregunta|.	self assert: [ user likesTotales = 0 ].	unaRespuesta := Respuesta new.	unaRespuesta like: user.	unaPregunta := Pregunta new.	unaPregunta like: user.	user agregarPregunta: unaPregunta.	user agregarRespuesta: unaRespuesta.	self assert: [ user likesTotales = 2 ].	! !WAComponent subclass: #BaseComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-UI'!!BaseComponent methodsFor: 'rendering' stamp: 'Romina 4/17/2020 21:10'!renderHeadOn: aCanvas	 aCanvas heading				level: 1;				with: 'CuOOra '.				 aCanvas headingGroup: [ 								self perfilButton: self session usuario on: aCanvas.								self logoutLink: aCanvas]! !!BaseComponent methodsFor: 'rendering' stamp: 'Romina 4/8/2020 12:27'!renderBodyOn: aCanvas	self subclassResponsibility! !!BaseComponent methodsFor: 'rendering' stamp: 'Romina 4/17/2020 14:00'!renderContentOn: aCanvas	aCanvas form: [ self renderHeadOn:aCanvas.						self renderBodyOn:aCanvas]! !!BaseComponent methodsFor: 'accessing' stamp: 'Romina 4/9/2020 18:23'!dislike: unaPregunta	unaPregunta dislike: self session usuario.! !!BaseComponent methodsFor: 'accessing' stamp: 'Romina 4/9/2020 18:23'!like: unaPregunta	unaPregunta like: self session usuario.! !!BaseComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/18/2020 01:40'!headText: aCanvas	self subclassResponsibility ! !!BaseComponent methodsFor: 'initialization' stamp: 'Romina 4/9/2020 11:21'!initialize 	super initialize.	self session sistema: Sistema soleInstance.! !!BaseComponent methodsFor: 'hooks' stamp: 'Romina 4/18/2020 11:42'!style 	^ '  .bigInput input { margin-left: 20px;							width: 500px;							height: 100px; }			.tit input{ margin-left: 20px;							width: 500px;							height: 20px; }					#nq label { margin-left: 430px; }				h4 { margin-left: 560px;				display:inline; }		h3 { margin-left: 10px; 			  font-size: large;			align: center;}	   h2 label { margin-left: 440px;					margin-right: 400px; }		h2 { margin-left: 50px;			 pading-top: 50px; }				h1 { 	font-size: xx-large;				text-align: left;				display: inline;				margin-left: 20px; }		a { margin-right: 5px; }		hgroup { float: right;					font-size: large;					display: inline;					margin-right: 5px;}		strong  { font-size: large; }		button { text-decoration: none;				margin-bottom: 10px;				margin-left: 10px;				margin-right: 5px;    			padding: 10px;    			font-weight: 600;    			font-size: 15px;   				color: #ffffff;    			background-color: #1883ba;    			border-radius: 6px;    			border: 2px solid #0016b0; }		ul {	    			list-style: none;							}		ul li {  				margin-right: 10px;				margin-bottom: 5px;    			border: 2px solid #0016b0;}		p { margin-left: 25px; }		label { font-size: medium;}		body {   		 		color: #222;    			font-size: 75%;    			font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;					'! !!BaseComponent methodsFor: 'form-buttons' stamp: 'Romina 4/17/2020 14:13'!cancelButton:aCanvas	aCanvas button 				callback:  [ self cancelar];				with: 'Cancelar' ! !!BaseComponent methodsFor: 'form-buttons' stamp: 'Romina 4/18/2020 02:36'!volverButton: aCanvas	aCanvas button 					callback: [ self volver ];					with: 'Volver'! !!BaseComponent methodsFor: 'form-buttons' stamp: 'Romina 4/17/2020 14:00'!perfilButton: unPerfil on: aCanvas	^ 	   aCanvas anchor 					callback: [ self verPerfil: unPerfil  ]; 					with: unPerfil nombre ! !!BaseComponent methodsFor: 'callbacks' stamp: 'Romina 4/16/2020 11:04'!volver	self answer.! !!BaseComponent methodsFor: 'callbacks' stamp: 'Romina 4/9/2020 16:45'!mostrarPregunta: unaPregunta	self call: (VerPreguntaComponent pregunta: unaPregunta )! !!BaseComponent methodsFor: 'callbacks' stamp: 'Romina 4/16/2020 14:57'!logoutLink: aCanvas	^ aCanvas anchor callback: [ self logout ]; with: 'Logout' ! !!BaseComponent methodsFor: 'callbacks' stamp: 'Romina 4/9/2020 12:24'!verPerfil: unPerfil	self call: (PerfilComponent perfil:unPerfil)! !!BaseComponent methodsFor: 'callbacks' stamp: 'Romina 4/17/2020 21:08'!logout	self session unregister.	self requestContext redirectTo: self application url.! !BaseComponent subclass: #AgregarPreguntaComponent	instanceVariableNames: 'pregunta titulo descripcion topico'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-UI'!!AgregarPreguntaComponent methodsFor: 'rendering' stamp: 'Romina 4/17/2020 14:23'!renderBodyOn: aCanvas	self renderHeadingOn: aCanvas.	self labelsPregunta: aCanvas.	aCanvas paragraph: [ self buttonAgregarPregunta: aCanvas.							self cancelButton: aCanvas. ]			! !!AgregarPreguntaComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/16/2020 12:46'!headText: aCanvas	^ aCanvas label: 'Nueva pregunta'! !!AgregarPreguntaComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/17/2020 14:22'!buttonAgregarPregunta: aCanvas	aCanvas button				callback: [ self agregarPregunta ];				with: 'Agregar pregunta'.! !!AgregarPreguntaComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/17/2020 14:14'!cancelar	self answer! !!AgregarPreguntaComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/18/2020 02:30'!renderHeadingOn: aCanvas		aCanvas 				heading				level: 2;				with: [ self headText:aCanvas].! !!AgregarPreguntaComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/18/2020 02:24'!labelsPregunta: aCanvas					   aCanvas				paragraph: [ aCanvas label: 'Título de su pregunta: '].			aCanvas paragraph: [ aCanvas div    				class: 'tit';    				with: [aCanvas textInput on: #titulo of: self ]].			aCanvas paragraph: [  aCanvas label: 'Descripción: '.					aCanvas div    				class: 'bigInput';    				with: [aCanvas textInput on: #descripcion of: self ]].			aCanvas				paragraph: [ aCanvas label: 'Tópico: '.					aCanvas div    				class: 'tit';    				with: [aCanvas textInput on: #topico of: self ]]! !!AgregarPreguntaComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/19/2020 12:04'!agregarPregunta	(titulo = '') ifFalse: [ 								pregunta titulo: titulo descripcion: descripcion topicos: (Set withAll: (self topico substrings: ',')) usuarioCreador: self session usuario.								self session sistema agregarPregunta: pregunta].	self answer ! !!AgregarPreguntaComponent methodsFor: 'accessing' stamp: 'Romina 4/8/2020 11:33'!descripcion: unaDescripcion	descripcion := unaDescripcion ! !!AgregarPreguntaComponent methodsFor: 'accessing' stamp: 'Romina 4/8/2020 11:42'!topico: unTopico	topico := unTopico ! !!AgregarPreguntaComponent methodsFor: 'accessing' stamp: 'Romina 4/8/2020 11:33'!descripcion 	^ descripcion ! !!AgregarPreguntaComponent methodsFor: 'accessing' stamp: 'Romina 4/18/2020 20:12'!topico	^ topico ! !!AgregarPreguntaComponent methodsFor: 'initialization' stamp: 'Romina 4/8/2020 11:32'!titulo: unTitulo	titulo:= unTitulo ! !!AgregarPreguntaComponent methodsFor: 'initialization' stamp: 'Romina 4/8/2020 11:33'!initialize 	pregunta := Pregunta new.	titulo := ''.	descripcion := ''.! !!AgregarPreguntaComponent methodsFor: 'initialization' stamp: 'Romina 4/8/2020 11:32'!titulo	^ titulo! !BaseComponent subclass: #HomeComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-UI'!!HomeComponent methodsFor: 'rendering' stamp: 'Romina 4/17/2020 21:10'!renderBodyOn: aCanvas	aCanvas form: [ self renderHeadingOn: aCanvas.						self listarPreguntas: (self preguntas) on: aCanvas ] ! !!HomeComponent methodsFor: 'add method - compiled method' stamp: 'Romina 4/8/2020 21:00'!agregarRespuesta: unaPregunta	self call: (AgregarRespuestaComponent pregunta: unaPregunta )! !!HomeComponent methodsFor: 'listado' stamp: 'Romina 4/17/2020 11:16'!unaPregunta:pregunta on: aCanvas	 self titulo: pregunta on: aCanvas .	 self preguntaLabels: pregunta on: aCanvas.	 self buttonsCalificacion: pregunta on: aCanvas .! !!HomeComponent methodsFor: 'listado' stamp: 'Romina 4/18/2020 11:39'!listarPreguntas: preguntas on: aCanvas	(preguntas) ifEmpty: [ aCanvas heading											 level: 3;											 with: [  aCanvas div id: 'nq'; with: [aCanvas label: 'No hay preguntas para mostrar' ]]]					ifNotEmpty: [  						^  aCanvas							unorderedList: [ preguntas do: 									[ :each | aCanvas listItem: [  self unaPregunta: each on: aCanvas. 																			self buttonAgregarRespuesta: each on:aCanvas ]  ] ]]! !!HomeComponent methodsFor: 'accessing' stamp: 'Romina 5/17/2020 12:34'!preguntas 	^ ((self session sistema obtenerPreguntasDeInteresPara: self session usuario) asSortedCollection: [ :x :y | x fechaCreacion  > y fechaCreacion ]) takeFirst: 5! !!HomeComponent methodsFor: 'accessing' stamp: 'Romina 4/8/2020 11:36'!agregarPregunta	self call: (AgregarPreguntaComponent new)! !!HomeComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/18/2020 11:36'!headText: aCanvas	^ aCanvas label: 'Últimas preguntas'! !!HomeComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/18/2020 02:56'!buttonAgregarRespuesta: unaPregunta on:aCanvas	 aCanvas button				 callback: [self agregarRespuesta: unaPregunta ];				 with: 'Agregar respuesta'! !!HomeComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/17/2020 11:53'!buttonsCalificacion:pregunta on: aCanvas 	aCanvas paragraph: [ aCanvas label: 'Likes: '.								aCanvas label: pregunta cantidadLikes.								aCanvas label: ' | Dislikes: '.								aCanvas label: pregunta cantidadDislikes ].	aCanvas paragraph: [  			aCanvas button					callback:[ self like: pregunta ];					with: 'Like'.			aCanvas button					callback:[ self dislike: pregunta ];					with: 'Dislike' ]! !!HomeComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/17/2020 12:08'!buttonAgregarPregunta: aCanvas	aCanvas button 				callback: [ self agregarPregunta ] ;				with: 'Nueva pregunta'.! !!HomeComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/17/2020 11:17'!titulo: pregunta on: aCanvas	aCanvas paragraph: [aCanvas anchor 					callback: [self mostrarPregunta: pregunta];					with: [ aCanvas strong: pregunta titulo asString]]! !!HomeComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/18/2020 02:34'!renderHeadingOn: aCanvas		aCanvas 				heading				level: 2;				with: [ self headText:aCanvas.						  self buttonAgregarPregunta: aCanvas.].	! !!HomeComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/18/2020 17:11'!preguntaLabels:pregunta on: aCanvas	  	aCanvas paragraph: [ aCanvas label: 'Tópicos: '.								aCanvas label:  (', ' join: pregunta nombreTopicos)].	aCanvas paragraph:[ aCanvas label: 'Realizada por: '.										self perfilButton: pregunta usuarioCreador on: aCanvas.								aCanvas label: ' | ' , pregunta respuestas size asString , ' respuestas.'.]	! !BaseComponent subclass: #LoginComponent	instanceVariableNames: 'nombre contrasenia'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-UI'!!LoginComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/9/2020 12:12'!perfil	''! !!LoginComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/17/2020 22:37'!headText: aCanvas	aCanvas paragraph: [ aCanvas heading level: 3; with: 'Bienvenido a CuOOra. Inicie sesión para continuar.']! !!LoginComponent methodsFor: 'as yet unclassified' stamp: 'Romina 5/17/2020 13:45'!iniciarSesion	|usuario|.	usuario := Usuario new.	usuario nombre: nombre email: ''contrasenia: contrasenia.	(self session sistema existeUsuario: usuario) ifTrue: [  self session login: (self session sistema obtenerUsuario: usuario). 																			self call: (HomeComponent new)]																ifFalse: [ nombre  := nil.																			contrasenia  := nil ]! !!LoginComponent methodsFor: 'rendering' stamp: 'Romina 4/17/2020 22:32'!renderBodyOn: aCanvas		self headText: aCanvas.		aCanvas paragraph: [ aCanvas label: 'Usuario: '.					aCanvas textInput on: #nombre of: self ] .			aCanvas				paragraph: [ aCanvas label: 'Contraseña: '.					aCanvas passwordInput on: #contrasenia of: self ].			aCanvas button				callback: [ self iniciarSesion ];				with: 'Iniciar sesión' ! !!LoginComponent methodsFor: 'rendering' stamp: 'Romina 4/14/2020 10:42'!renderHeadOn: aCanvas	 aCanvas heading				level: 1;				with: 'CuOOra '! !!LoginComponent methodsFor: 'initialization' stamp: 'Romina 4/9/2020 11:21'!initialize 	super initialize.	nombre := ''.	contrasenia := ''.! !!LoginComponent methodsFor: 'accessing' stamp: 'Romina 4/8/2020 08:52'!contrasenia: unaContrasenia	contrasenia := unaContrasenia ! !!LoginComponent methodsFor: 'accessing' stamp: 'Romina 4/8/2020 08:53'!nombre	^ nombre! !!LoginComponent methodsFor: 'accessing' stamp: 'Romina 4/8/2020 08:51'!nombre: unNombre	nombre := unNombre! !!LoginComponent methodsFor: 'accessing' stamp: 'Romina 4/8/2020 08:52'!contrasenia	^ contrasenia ! !HomeComponent subclass: #PerfilComponent	instanceVariableNames: 'perfil'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-UI'!!PerfilComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/18/2020 11:34'!headText: aCanvas	self volverButton:aCanvas. aCanvas label: 'Preguntas de ', self perfil nombre					! !!PerfilComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/18/2020 11:34'!renderHeadingOn: aCanvas		super renderHeadingOn: aCanvas.		aCanvas 				heading				level: 4;				with:  'Seguidores: ', perfil seguidores size asString , ' | ', 'Seguidos: ' , perfil seguidos size asString.				 (perfil nombre = self session usuario nombre) ifFalse: [  aCanvas button callback: [ self seguir ]; 																								with: ' Seguir' ]				 ! !!PerfilComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/9/2020 12:47'!seguir	self session usuario agregarSeguido: perfil! !!PerfilComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/17/2020 11:59'!perfil 	^ perfil! !!PerfilComponent methodsFor: 'accessing' stamp: 'Romina 4/9/2020 12:25'!perfil: unPerfil	perfil := unPerfil ! !!PerfilComponent methodsFor: 'accessing' stamp: 'Romina 4/9/2020 12:40'!preguntas	^ self perfil preguntas! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PerfilComponent class	instanceVariableNames: ''!!PerfilComponent class methodsFor: 'accessing' stamp: 'Romina 4/9/2020 12:26'!perfil: unPerfil	^ self new perfil: unPerfil;		yourself.! !WASession subclass: #UsuarioSession	instanceVariableNames: 'usuario sistema'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-UI'!!UsuarioSession methodsFor: 'as yet unclassified' stamp: 'Romina 4/8/2020 08:58'!login: unUsuario	usuario := unUsuario ! !!UsuarioSession methodsFor: 'as yet unclassified' stamp: 'Romina 4/16/2020 14:37'!logout	usuario := nil.! !!UsuarioSession methodsFor: 'accessing' stamp: 'Romina 4/8/2020 16:36'!sistema 	^sistema! !!UsuarioSession methodsFor: 'accessing' stamp: 'Romina 4/9/2020 11:19'!sistema: unSistema	sistema := unSistema.! !!UsuarioSession methodsFor: 'accessing' stamp: 'Romina 4/8/2020 08:58'!usuario 	^ usuario! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!UsuarioSession class	instanceVariableNames: ''!!UsuarioSession class methodsFor: 'accessing' stamp: 'Romina 4/9/2020 11:19'!sistema: unSistema	^ self new sistema: unSistema;	yourself ! !HomeComponent subclass: #VerPreguntaComponent	instanceVariableNames: 'pregunta'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-UI'!!VerPreguntaComponent methodsFor: 'rendering' stamp: 'Romina 4/17/2020 11:48'!renderBodyOn: aCanvas		self renderHeadingOn: aCanvas.		self unaPregunta: pregunta on: aCanvas.		self plusContent: aCanvas. ! !!VerPreguntaComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/18/2020 11:35'!headText: aCanvas	self volverButton:aCanvas. aCanvas label: 'Detalles'! !!VerPreguntaComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/18/2020 02:51'!plusContent: aCanvas	aCanvas paragraph: [  self listarRespuestas: aCanvas].							self buttonsPregunta: aCanvas! !!VerPreguntaComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/17/2020 11:59'!mostrarRespuesta: unaRespuesta en: aCanvas	aCanvas paragraph:  [ self labelsRespuesta: unaRespuesta on: aCanvas.								self buttonsCalificacion: unaRespuesta on: aCanvas]	! !!VerPreguntaComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/18/2020 02:59'!buttonsPregunta: aCanvas	aCanvas paragraph: [ self buttonAgregarRespuesta: pregunta on: aCanvas. 								self volverButton: aCanvas.]! !!VerPreguntaComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/17/2020 11:57'!labelsRespuesta: unaRespuesta on: aCanvas	aCanvas paragraph: [aCanvas label: 'Respuesta de '. self perfilButton: unaRespuesta usuarioCreador on: aCanvas ].								aCanvas paragraph:  [ aCanvas label: unaRespuesta texto]! !!VerPreguntaComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/17/2020 11:49'!listarRespuestas: aCanvas	aCanvas unorderedList: [ pregunta respuestas do:									 [ :unaRespuesta | aCanvas listItem:										 [ self mostrarRespuesta: unaRespuesta en:aCanvas ]]]! !!VerPreguntaComponent methodsFor: 'accessing' stamp: 'Romina 4/9/2020 17:15'!pregunta 	^pregunta! !!VerPreguntaComponent methodsFor: 'accessing' stamp: 'Romina 4/9/2020 17:15'!pregunta: unaPregunta	pregunta := unaPregunta ! !!VerPreguntaComponent methodsFor: 'initialization' stamp: 'Romina 4/17/2020 12:03'!titulo: unaPregunta on:aCanvas	aCanvas paragraph: [ aCanvas strong: unaPregunta titulo asString.	aCanvas paragraph: [ aCanvas label: 'Descripción: '. aCanvas label: unaPregunta descripcion asString] ] ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!VerPreguntaComponent class	instanceVariableNames: ''!!VerPreguntaComponent class methodsFor: 'accessing' stamp: 'Romina 4/9/2020 17:16'!pregunta: unaPregunta	^self new pregunta: unaPregunta; yourself ! !VerPreguntaComponent subclass: #AgregarRespuestaComponent	instanceVariableNames: 'respuesta'	classVariableNames: ''	poolDictionaries: ''	category: 'CuOOra-UI'!!AgregarRespuestaComponent methodsFor: 'accessing' stamp: 'Romina 4/8/2020 14:22'!respuesta	^ respuesta! !!AgregarRespuestaComponent methodsFor: 'accessing' stamp: 'Romina 4/9/2020 09:53'!respuesta: unaRespuesta	respuesta := unaRespuesta! !!AgregarRespuestaComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/18/2020 02:33'!buttonsRespuesta: aCanvas	 aCanvas button 					callback:  [ self guardarRespuesta];					with: 'Enviar respuesta'.	self cancelButton: aCanvas! !!AgregarRespuestaComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/19/2020 11:21'!guardarRespuesta	(respuesta = '') ifFalse: [ Respuesta texto: respuesta pregunta: pregunta   usuarioCreador: self session usuario].	self answer	! !!AgregarRespuestaComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/9/2020 10:05'!cancelar	respuesta := ''.	self answer! !!AgregarRespuestaComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/18/2020 02:25'!labelsRespuesta: aCanvas	aCanvas paragraph: [ aCanvas label: 'Respuesta: '.								aCanvas div    								class: 'bigInput';    								with: [aCanvas textInput on: #respuesta of: self. ]]! !!AgregarRespuestaComponent methodsFor: 'as yet unclassified' stamp: 'Romina 4/18/2020 02:33'!plusContent: aCanvas	aCanvas form:  [ self labelsRespuesta: aCanvas.			  			 self buttonsRespuesta: aCanvas.  ]! !